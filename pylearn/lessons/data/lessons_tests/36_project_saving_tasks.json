[
    {
        "description": "<p>Implement the following functions to save and load tasks from a file:</p>\n<ul>\n    <li><code>save_tasks_to_file()</code>: Save a list of tasks in JSON format to a file.</li>\n    <li><code>load_tasks_from_file()</code>: Read tasks from a file and convert them back into task objects.</li>\n</ul>\n<p>Update the <code>Task</code> class to include the methods <code>to_dict()</code> and <code>from_dict()</code>.</p>",
        "code_stub": "<pre><code>import json\n\ndef save_tasks_to_file(task_list, filename):\n    # Convert tasks to dictionaries and save to file\n    pass\n\ndef load_tasks_from_file(filename):\n    # Read tasks from file and convert to task objects\n    pass</code></pre>",
        "correct_code": "<pre><code>import json\n\nclass Task:\n    def to_dict(self):\n        return {\n            'title': self.title,\n            'description': self.description,\n            'completed': self.completed\n        }\n\n    @classmethod\n    def from_dict(cls, data):\n        return cls(data['title'], data['description'], data['completed'])\n\ndef save_tasks_to_file(task_list, filename):\n    tasks = [task.to_dict() for task in task_list]\n    with open(filename, 'w') as file:\n        json.dump(tasks, file, indent=4)\n    print(f\"Tasks saved to {filename}\")\n\ndef load_tasks_from_file(filename):\n    try:\n        with open(filename, 'r') as file:\n            tasks_data = json.load(file)\n        return [Task.from_dict(data) for data in tasks_data]\n    except FileNotFoundError:\n        print(f\"Error: {filename} not found.\")\n        return []</code></pre>",
        "expected_output": "<pre><code>Tasks saved to tasks.json\nLoaded Tasks: ['Complete Homework', 'Buy Groceries']</code></pre>",
        "points": 136
    }
]